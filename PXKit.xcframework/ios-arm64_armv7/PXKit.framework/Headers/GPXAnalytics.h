#import <Foundation/Foundation.h>
#import "GPXAnalyticsConfiguration.h"
#import "GPXSerializableValue.h"



NS_ASSUME_NONNULL_BEGIN

/**
 * This object provides an API for recording analytics.
 */
@class GPXAnalyticsConfiguration;


@interface GPXAnalytics : NSObject

/**
 * Used by the analytics client to configure various options.
 */
//@property (nonatomic, strong, readonly) GPXAnalyticsConfiguration *configuration;

/**
 * Setup this analytics client instance.
 *
 * @param configuration The configuration used to setup the client.
 */
- (instancetype)initWithConfiguration:(id)configuration;


/**
 * Enabled/disables debug logging to trace your data going through the SDK.
 *
 * @param showDebugLogs `YES` to enable logging, `NO` otherwise. `NO` by default.
 */
+ (void)debug:(BOOL)showDebugLogs;

/**
 * Returns the shared analytics client.
 *
 * @see -setupWithConfiguration:
 */
+ (instancetype _Nullable)sharedAnalytics;



- (NSString * _Nullable)userId;

- (NSString *)getAptrinsicId;

- (void)identify:(NSString *)userId
            user:(NSDictionary * _Nullable)userData
         account:(NSDictionary *_Nullable)accountData
         options:(NSDictionary * _Nullable)options
       eventType:(NSString *)eventType
       sessionId: (NSString *)sessionId;


- (void)trackS:(NSString *)sessionId
       options: (NSDictionary * _Nullable)options
     eventType: (NSString *)eventType
isAutoGenerated: (BOOL)autoGenerated;


/*!
 @method

 @abstract
 Record the actions your users perform.

 @param eventType The name of the event you're tracking.

 @param properties    A dictionary of properties for the event. If the event was 'Added to Shopping Cart', it might
 have properties like price, productType, etc.

 @discussion
 When a user performs an action in your app, you'll want to track that action for later analysis. Use the event name to say what the user did, and properties to specify any interesting details of the action.

 */
- (void)properties:(SERIALIZABLE_DICT _Nullable)properties
    eventType:(NSString *)eventType
         sessionId:(NSString *)sessionId
   isAutoGenerated:(BOOL)autoGenerated
           options:(NSDictionary * _Nullable)options;


/*!
 @method

 @abstract
 Trigger an upload of all queued events.

 @discussion
 This is useful when you want to force all messages queued on the device to be uploaded. Please note that not all integrations
 respond to this method.
 */
- (void)flush;

/*!
 @method

 @abstract
 Reset any user state that is cached on the device.

 @discussion
 This is useful when a user logs out and you want to clear the identity. It will clear any
 traits or userId's cached on the device.
 */
- (void)reset;

- (void)resetAnonymousId;


- (void)updateTime:(NSTimeInterval)dispatchTimer packetSize:(NSInteger)size;

/*!
 @method

 @abstract
 Enable the sending of analytics data. Enabled by default.

 @discussion
 Occasionally used in conjunction with disable user opt-out handling.
 */
- (void)enable;


/*!
 @method

 @abstract
 Completely disable the sending of any analytics data.

 @discussion
 If have a way for users to actively or passively (sometimes based on location) opt-out of
 analytics data collection, you can use this method to turn off all data collection.
 */
- (void)disable;


/**
 * Version of the library.
 */
+ (NSString *)version;


- (id)configurations;

@end


NS_ASSUME_NONNULL_END
